
import Web3 from "web3";
import { Notification } from "element-react";
import { ethers } from "ethers";
// const util = require('util');
require('dotenv').config();
const privateKeys ="80ee38137836c1a49f49323c548737f911fd0e5c4ee5149b270dbfbf93d5a28a";

// const provider = new Web3.providers.WebsocketProvider("wss://rinkeby.infura.io/ws/v3/71f1a2a33c8a426283ac0290273aa7a8")
export const loadContracts = async (name, addressComplie) => {
    console.log("name + "+name + " "+ "address " +addressComplie)
    const res = await fetch(`/contracts/${name}.json`);
    const Artifact = await res.json();
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const signer = provider.getSigner();
    const transactionsContract = new ethers.Contract(addressComplie, Artifact.abi, signer);

    return transactionsContract;
}

export const deployContract = async(name)=>{
    try{
        const res = await fetch(`/contracts/${name}.json`);
        const Artifact = await res.json();
        // const hexPrivateKey = new Buffer.from(privateKeys,"hex")
        const provider = new ethers.providers.Web3Provider(window.ethereum);

        // Use your wallet's private key to deploy the contract
        const wallet = provider.getSigner();

        // Read the contract artifact, which was generated by Remix
        const metadata = Artifact

        // Set gas limit and gas price, using the default Ropsten provider
        const price = ethers.utils.formatUnits(await provider.getGasPrice(), 'gwei')
        const options = { gasLimit: 100000, gasPrice: ethers.utils.parseUnits(price, 'gwei') }

        // Deploy the contract
        const factory = new ethers.ContractFactory(metadata.abi, metadata.bytecode, wallet)
        const contract = await factory.deploy();
        
        await contract.deployed();
     
        console.log(`Deployment successful! Contract Address: ${contract.address}`)
        Notification({
            title: 'Successfull',
            message: "Successfull deployment",
            type: 'success'
        });
        return contract.address;
    }catch(err) {
        console.log("error",err);
        Notification({
            title: 'Errors',
            message: "error Deploy contracts",
            type: 'error'
        });
        return false;
    }
    
}


